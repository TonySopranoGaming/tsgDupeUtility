--Settings
local droppableOres = {192, 10, 9, 8} --BlueSteel, Steel, Iron, Copper
local droppableMats = {12, 52, 96, 101, 111, 119} --Wood, Stone, ChiseledStone, Shingles, WoodPlanks, Bricks
local droppableFood = {24, 95, 113, 107, 106, 190, 26, 20, 18, 14, 15, 21, 19, 13, 33} --Ribs, Carrot, Berry, Wheat, Mushroom, BerryPie, | Soup, Cooked Meat, raw meat, raw chicken, cooked chicken. DeliciousStew, MeatHunk, CarrotPie, Bread
local droppableAmmo = {73, 156} -- Arrows, BallistaBolts
local stacksToDrop = 9999 --Default value is 9999 which drops all your stacks basically.
local selectedItemCode = 192 --defaults to the bluesteel code

--Statuses
local dropEnabled = false

local function setItem(itemName)
   --Ores
    if itemName == "Bluesteel" then
        selectedItemCode = droppableOres[1]
        print(itemName.." has determined the selection of itemCode: ".. selectedItemCode)
    elseif itemName == "Steel" then
        selectedItemCode = droppableOres[2]
        print(itemName.." has determined the selection of itemCode: ".. selectedItemCode)
    elseif itemName == "Iron" then
     selectedItemCode = droppableOres[3]
     print(itemName.." has determined the selection of itemCode: ".. selectedItemCode)
    elseif itemName == "Copper" then
     selectedItemCode = droppableOres[4]
     print(itemName.." has determined the selection of itemCode: ".. selectedItemCode)
    end
    --Materials
    if itemName == "Wood" then
      selectedItemCode = droppableMats[1]
    elseif itemName == "Stone" then
      selectedItemCode = droppableMats[2]
    elseif itemName == "ChiseledStone" then
      selectedItemCode = droppableMats[3]
    elseif itemName == "Shingles" then
      selectedItemCode = droppableMats[4]
    elseif itemName == "WoodPlanks" then
      selectedItemCode = droppableMats[5]
    elseif itemName == "Bricks" then
      selectedItemCode = droppableMats[6]
    end
    --Food
   if itemName == "Ribs" then
      selectedItemCode = droppableFood[1]
    elseif itemName == "Carrot" then
      selectedItemCode = droppableFood[2]
    elseif itemName == "Berry" then
      selectedItemCode = droppableFood[3]
    elseif itemName == "Wheat" then
      selectedItemCode = droppableFood[4]
    elseif itemName == "Mushroom" then
      selectedItemCode = droppableFood[5]
    elseif itemName == "BerryPie" then
      selectedItemCode = droppableFood[6]
   elseif itemName == "Soup" then
      selectedItemCode = droppableFood[7]
    elseif itemName == "CookedMeat" then
      selectedItemCode = droppableFood[8]
    elseif itemName == "RawMeat" then
      selectedItemCode = droppableFood[9]
    elseif itemName == "RawChicken" then
      selectedItemCode = droppableFood[10]
    elseif itemName == "CookedChicken" then
      selectedItemCode = droppableFood[11]
    elseif itemName == "DeliciousStew" then
      selectedItemCode = droppableFood[12]
    elseif itemName == "MeatHunk" then
      selectedItemCode = droppableFood[13]
    elseif itemName == "CarrotPie" then
      selectedItemCode = droppableFood[14]
    elseif itemName == "Bread" then
      selectedItemCode = droppableFood[15]
    end
    --Ammo
    if itemName == "Arrows" then
      selectedItemCode = droppableAmmo[1]
    elseif itemName == "BallistaBolt" then
      selectedItemCode = droppableAmmo[2]
    end
end

local function dropItem(amount, itemCode)
    for i=1, amount do
    if dropEnabled == false then
        break
    end
	local args = {
    [1] = "inventory",
    [2] = itemCode,
    [3] = 99
}

game:GetService("ReplicatedStorage").remoteInterface.inventory.drop:InvokeServer(unpack(args))
wait(0.00001)
end
dropEnabled = false
end

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
   Name = "Pablo's Dupe Utility",
   LoadingTitle = "Created by SaintPablo#7379",
   LoadingSubtitle = "Thank You for being part of our Community.",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "SP_SurvivalGameDropUtility"
   },
   Discord = {
      Enabled = true,
      Invite = "zsuHWTJeCD", -- The Discord invite code, do not include discord.gg/
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Saint Pablo Dupe Utility",
      Subtitle = "Key System",
      Note = "Join the discord (discord.gg/zsuHWTJeCD)",
      FileName = "SiriusKey",
      SaveKey = true,
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = "7tBSfYru"
   }
})

local Tab = Window:CreateTab("Drop Resources", 4483362458) 
local Section = Tab:CreateSection("Auto Drop")

local Tab2 = Window:CreateTab("Extra", 4483362458) 
local Section = Tab2:CreateSection("Utility")
local Button = Tab2:CreateButton({
   Name = "Destroy GUI",
   Callback = function()
    dropEnabled = false
    Rayfield:Destroy()
   -- The function that takes place when the button is pressed
   end,
})
local Section = Tab:CreateSection("Choose Type of Item To Drop (Default: Bluesteel)")
--Dropdown selection menu.
local Dropdown = Tab:CreateDropdown({
   Name = "Ores",
   Options = {"Bluesteel","Steel","Iron","Copper"},
   CurrentOption = "Bluesteel",
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
    setItem(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

--Dropdown selection menu.
local Dropdown = Tab:CreateDropdown({
   Name = "Materials",
   Options = {"Wood","Stone","ChiseledStone","Shingles","WoodPlanks","Bricks"}, --Wood, Stone, ChiseledStone, Shingles, WoodPlanks, Bricks
   CurrentOption = "Select",
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
    setItem(Option)
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Food",
   Options = {"Ribs","MeatHunk","CookedMeat","CarrotPie","BerryPie","DeliciousStew","Soup","Bread","Carrot","Berry","Wheat","Mushroom","CookedChicken","RawChicken","RawMeat"}, --Ribs, Carrot, Berry, Wheat, Mushroom, BerryPie, Soup, CookedMeat, RawMeat, RawChicken, CookedChicken.
   CurrentOption = "Select",
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
    setItem(Option)
   end,
})

--Dropdown selection menu.
local Dropdown = Tab:CreateDropdown({
   Name = "Ammo",
   Options = {"Arrows","BallistaBolt"},
   CurrentOption = "Select",
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
    setItem(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

local Section = Tab:CreateSection("Choose how many stacks to drop (Default is 9999)")
local Input = Tab:CreateInput({
   Name = "Amount of Stacks To Drop",
   PlaceholderText = "9999",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
    stacksToDrop = tonumber(Text)
    print("Amount of Stacks To Drop: "..tostring(stacksToDrop))
   -- The function that takes place when the input is changed
   -- The variable (Text) is a string for the value in the text box
   end,
})

local Section = Tab:CreateSection("Make sure to DOUBLE CHECK your settings before pressing the Drop Button!")

local Button = Tab:CreateButton({
   Name = "Drop Selected",
   Callback = function()
    dropEnabled = false
    wait(0.00002) --gives any other running dropfunctions a chance to break before running another one (prevents lag or crashes)
    dropEnabled = true
    dropItem(stacksToDrop, selectedItemCode)
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "FORCE STOP",
   Callback = function()
    dropEnabled = false
   -- The function that takes place when the button is pressed
   end,
})
local Section = Tab:CreateSection("If you character keeps dropping when trying to pick something up, press force stop.")
